{"version":3,"sources":["component/card.js","component/cardlist.js","component/myrobots.js","component/Scroll.js","component/SearchBox.js","container/App.js","serviceWorker.js","index.js"],"names":["card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","Cardlist","myrobots","map","user","i","component_card","key","username","Scroll","props","style","overflow","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredrobots","filter","toLowerCase","includes","component_SearchBox","component_Scroll","cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73fa2719.chunk.js","sourcesContent":["import React from 'react'\r\n// import {myrobots} from './myrobots';\r\n\r\nconst card = ({name, email, id}) => { \r\n    // const { name, email, id} = props;\r\n    return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n        <div>\r\n            <h3>{name}</h3>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default card;"," import React from 'react';\r\nimport Card from './card';\r\n// import {myrobots} from './myrobots';\r\n\r\n\r\nconst Cardlist = ({myrobots}) =>{\r\n    return(\r\n        <div>\r\n            {\r\n               myrobots.map((user, i)=>{\r\n                return(\r\n                 <Card key={i} id={myrobots[i].id}\r\n                     name={myrobots[i].name} \r\n                     email={myrobots[i].email} \r\n                     />\r\n               );\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n        };\r\n\r\n\r\nexport default Cardlist;","export const myrobots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  },\n  {\n    id: 11,\n    name: 'Benjus Joost',\n    username: 'Mlgtas.Gooyty',\n    email: 'Ben.jah@hanna.org'\n  },\n   {\n    id: 12,\n    name: 'Koppe Htook',\n    username: 'Woplkiu.Holol',\n    email: 'jok.bed@genm.edu'\n  }\n];\n","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\nreturn(\r\n    <div style={{overflow: 'scroll', border:'0px solid black', height: '1000px'}}>\r\n         {props.children}\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield, searchChange}) =>{\r\n    return(\r\n        <div className='pa2' >\r\n            <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n             type='search' placeholder= 'search robots'\r\n             onChange={searchChange}\r\n             />\r\n             \r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React,{Component} from 'react';\r\nimport CardList from '../component/cardlist';\r\nimport{myrobots} from '../component/myrobots'\r\nimport Scroll from '../component/Scroll';\r\nimport SearchBox from '../component/SearchBox';\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            myrobots: myrobots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange =(event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const filteredrobots = this.state.myrobots.filter(myrobots =>{\r\n        return myrobots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        return (\r\n            <div className='tc'>\r\n                <h1>ROBOFRIENDS</h1>\r\n                <SearchBox searchChange ={this.onSearchChange} />\r\n                <Scroll>\r\n                <CardList myrobots = {filteredrobots}/>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n      \r\nexport default App;\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}